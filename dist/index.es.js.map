{"version":3,"file":"index.es.js","sources":["../src/useObjectFit.js"],"sourcesContent":["import { useRef, useState, useEffect, useCallback } from \"react\";\n\n/**\n * @param {object} {\n *   type, // \"cover\", \"contain\"\n *   imgUrl,\n *   container: {\n *      ref, // get container size by React ref\n *      dom, // get container size by Dom elm\n *      width, // directly give container size\n *      height\n *   },\n * }\n * @return {object} {\n *    width, // object fit width\n *    height, // object fit hight\n *    offsetX, // object fit offsetX\n *    offsetY, // object fit offsetY\n *    imgWidth,\n *    imgHeight,\n *    imgRatio, // origin image imgRatio\n *    containerWidth,\n *    containerHeight,\n * }\n */\nconst useObjectFit = ({\n  type,\n  imgUrl,\n  container: { ref, dom, width: containerWidth, height: containerHeight },\n}) => {\n  const [size, setSize] = useState({\n    width: 0,\n    height: 0,\n    offsetX: 0,\n    offsetY: 0,\n    imgWidth: 0,\n    imgHeight: 0,\n    imgRatio: 0,\n    containerWidth: 0,\n    containerHeight: 0,\n  });\n\n  const refResizeGetCallback = useRef();\n  const refIsImgLoad = useRef();\n  const [imgSize, setImgSize] = useState({ width: 0, height: 0 });\n\n  const get = useCallback(() => {\n    const targetContainer = ref?.current || dom;\n\n    const targetWidth = containerWidth || targetContainer?.clientWidth;\n    const targetHeight = containerHeight || targetContainer?.clientHeight;\n    const targetRatio = targetWidth / targetHeight;\n\n    const { width: imgWidth, height: imgHeight } = imgSize;\n\n    const imgRatio = imgWidth / imgHeight;\n\n    let width,\n      height,\n      offsetX = 0,\n      offsetY = 0;\n\n    if (type === \"cover\") {\n      if (imgRatio >= targetRatio) {\n        const scale = targetHeight / imgHeight;\n\n        width = imgWidth * scale;\n        offsetX = (targetWidth - width) / 2;\n        height = targetHeight;\n      } else {\n        const scale = targetWidth / imgWidth;\n        width = targetWidth;\n        height = imgHeight * scale;\n        offsetY = (targetHeight - height) / 2;\n      }\n    } else if (type === \"contain\") {\n      if (imgRatio >= targetRatio) {\n        const scale = targetWidth / imgWidth;\n        width = targetWidth;\n        height = imgHeight * scale;\n\n        offsetY = (targetHeight - height) / 2;\n      } else {\n        const scale = targetHeight / imgHeight;\n        height = targetHeight;\n        width = imgWidth * scale;\n        offsetX = (targetWidth - width) / 2;\n      }\n    }\n\n    setSize({\n      width,\n      height,\n      imgRatio,\n      offsetX,\n      offsetY,\n      imgWidth,\n      imgHeight,\n      containerWidth: targetWidth,\n      containerHeight: targetHeight,\n    });\n  }, [type, ref, dom, containerWidth, containerHeight, imgSize]);\n\n  useEffect(() => {\n    if (!refIsImgLoad.current) return;\n\n    get();\n\n    const targetContainer = ref?.current || dom;\n    if (refResizeGetCallback.current) {\n      window.removeEventListener(\"resize\", refResizeGetCallback.current);\n    }\n\n    if (window && targetContainer) {\n      window.addEventListener(\"resize\", get);\n    }\n    refResizeGetCallback.current = get;\n    return () => {\n      window.removeEventListener(\"resize\", refResizeGetCallback.current);\n    };\n  }, [get]);\n\n  useEffect(() => {\n    if (!imgUrl) return;\n    refIsImgLoad.current = false;\n    const img = document.createElement(\"img\");\n\n    img.addEventListener(\"load\", (e) => {\n      refIsImgLoad.current = true;\n      const { naturalWidth, naturalHeight } = e.target;\n      setImgSize({ width: naturalWidth, height: naturalHeight });\n    });\n    img.src = imgUrl;\n  }, [imgUrl]);\n\n  return size;\n};\n\nexport default useObjectFit;\n"],"names":["useObjectFit","type","imgUrl","container","ref","dom","containerWidth","width","containerHeight","height","useState","offsetX","offsetY","imgWidth","imgHeight","imgRatio","size","setSize","refResizeGetCallback","useRef","refIsImgLoad","imgSize","setImgSize","get","useCallback","targetContainer","current","targetWidth","clientWidth","targetHeight","clientHeight","targetRatio","useEffect","window","removeEventListener","addEventListener","img","document","createElement","e","target","naturalWidth","naturalHeight","src"],"mappings":"iiCAyBMA,EAAe,gBACnBC,IAAAA,KACAC,IAAAA,WACAC,UAAaC,IAAAA,IAAKC,IAAAA,IAAYC,IAAPC,MAA+BC,IAARC,WAEtBC,EAAS,CAC/BH,MAAO,EACPE,OAAQ,EACRE,QAAS,EACTC,QAAS,EACTC,SAAU,EACVC,UAAW,EACXC,SAAU,EACVT,eAAgB,EAChBE,gBAAiB,OATZQ,OAAMC,OAYPC,EAAuBC,IACvBC,EAAeD,QACST,EAAS,CAAEH,MAAO,EAAGE,OAAQ,OAApDY,OAASC,OAEVC,EAAMC,GAAY,eAWlBjB,EACFE,EAXIgB,GAAkBrB,MAAAA,SAAAA,EAAKsB,UAAWrB,EAElCsB,EAAcrB,IAAkBmB,MAAAA,SAAAA,EAAiBG,aACjDC,EAAerB,IAAmBiB,MAAAA,SAAAA,EAAiBK,cACnDC,EAAcJ,EAAcE,EAEnBhB,EAAgCQ,EAAvCd,MAAyBO,EAAcO,EAAtBZ,OAEnBM,EAAWF,EAAWC,EAI1BH,EAAU,EACVC,EAAU,KAEC,UAATX,EACEc,GAAYgB,GAIdpB,GAAWgB,GADXpB,EAAQM,GAFMgB,EAAef,KAGK,EAClCL,EAASoB,IAGTtB,EAAQoB,EAERf,GAAWiB,GADXpB,EAASK,GAFKa,EAAcd,KAGQ,QAEjC,GAAa,YAATZ,EAAoB,IACzBc,GAAYgB,EAEdxB,EAAQoB,EAGRf,GAAWiB,GAFXpB,EAASK,GAFKa,EAAcd,KAIQ,OAGpCJ,EAASoB,EAETlB,GAAWgB,GADXpB,EAAQM,GAFMgB,EAAef,KAGK,EAItCG,EAAQ,CACNV,MAAAA,EACAE,OAAAA,EACAM,SAAAA,EACAJ,QAAAA,EACAC,QAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAR,eAAgBqB,EAChBnB,gBAAiBqB,MAElB,CAAC5B,EAAMG,EAAKC,EAAKC,EAAgBE,EAAiBa,WAErDW,GAAU,cACHZ,EAAaM,SAElBH,QAEME,GAAkBrB,MAAAA,SAAAA,EAAKsB,UAAWrB,SACpCa,EAAqBQ,SACvBO,OAAOC,oBAAoB,SAAUhB,EAAqBQ,SAGxDO,QAAUR,GACZQ,OAAOE,iBAAiB,SAAUZ,GAEpCL,EAAqBQ,QAAUH,EACxB,WACLU,OAAOC,oBAAoB,SAAUhB,EAAqBQ,aAE3D,CAACH,IAEJS,GAAU,cACH9B,GACLkB,EAAaM,SAAU,MACjBU,EAAMC,SAASC,cAAc,OAEnCF,EAAID,iBAAiB,QAAQ,SAACI,GAC5BnB,EAAaM,SAAU,QACiBa,EAAEC,OAAlCC,IAAAA,aAAcC,IAAAA,cACtBpB,EAAW,CAAEf,MAAOkC,EAAchC,OAAQiC,OAE5CN,EAAIO,IAAMzC,KACT,CAACA,IAEGc"}