{"version":3,"sources":["useObjectFit.js","App.js","index.js"],"names":["useObjectFit","type","imgUrl","container","ref","dom","containerWidth","width","containerHeight","height","useState","ratio","offsetX","offsetY","imgWidth","imgHeight","size","setSize","useEffect","targetContainer","current","targetRatio","clientWidth","clientHeight","img","document","createElement","addEventListener","e","target","naturalHeight","naturalWidth","console","log","src","App","images","setImages","data_url","onChangeCoverImg","useCallback","imageList","addUpdateIndex","className","value","onChange","maxNumber","dataURLKey","acceptType","onImageUpload","onImageRemoveAll","onImageUpdate","onImageRemove","isDragging","dragProps","errors","style","color","onClick","maxFileSize","resolution","map","image","index","alt","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.331c2fae.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\n/**\n * @param {object} {\n *   type, // \"cover\", \"contain\"\n *   imgUrl,\n *   container: {\n *      ref, // get container size by React ref\n *      dom, // get container size by Dom elm\n *      width, // directly give container size\n *      height\n *   },\n * }\n * @return {object} {\n *    width, // object fit width\n *    height, // object fit hight\n *    offsetX, // object fit offsetX\n *    offsetY, // object fit offsetY\n *    ratio, // origin image ratio\n *    imgWidth,\n *    imgHeight,\n *    containerWidth,\n *    containerHeight,\n * }\n */\nconst useObjectFit = ({\n  type,\n  imgUrl,\n  container: { ref, dom, width: containerWidth, height: containerHeight },\n}) => {\n  const [size, setSize] = useState({\n    width: 0,\n    height: 0,\n    ratio: 0,\n    offsetX: 0,\n    offsetY: 0,\n    imgWidth: 0,\n    imgHeight: 0,\n    containerWidth: 0,\n    containerHeight: 0,\n  });\n\n  useEffect(() => {\n    const targetContainer = ref?.current || dom;\n    const targetWidth = containerWidth || targetContainer.clientWidth;\n    const targetHeight = containerHeight || targetContainer.clientHeight;\n    const targetRatio = targetWidth / targetHeight;\n\n    if (!imgUrl) return;\n    const img = document.createElement(\"img\");\n    img.addEventListener(\"load\", (e) => {\n      const { naturalHeight, naturalWidth } = e.target;\n      console.log(naturalWidth, naturalHeight);\n      const ratio = naturalWidth / naturalHeight;\n      let width,\n        height,\n        offsetX = 0,\n        offsetY = 0;\n\n      if (type === \"cover\") {\n        if (ratio >= targetRatio) {\n          const scale = containerHeight / naturalHeight;\n          width = naturalWidth * scale;\n          offsetX = (containerWidth - width) / 2;\n          height = containerHeight;\n        } else {\n          const scale = containerWidth / naturalWidth;\n          width = containerWidth;\n          height = naturalHeight * scale;\n          offsetY = (containerHeight - height) / 2;\n        }\n      } else if (type === \"contain\") {\n        if (ratio >= targetRatio) {\n          const scale = containerWidth / naturalWidth;\n          width = containerWidth;\n          height = naturalWidth * scale;\n          offsetY = (containerHeight - height) / 2;\n        } else {\n          const scale = containerHeight / naturalHeight;\n          height = containerHeight;\n          width = naturalWidth * scale;\n          offsetX = (containerWidth - width) / 2;\n        }\n      }\n\n      setSize({\n        width,\n        height,\n        ratio,\n        offsetX,\n        offsetY,\n        imgWidth: naturalWidth,\n        imgHeight: naturalHeight,\n        containerWidth,\n        containerHeight,\n      });\n    });\n    img.src = imgUrl;\n  }, [imgUrl, ref, dom, containerWidth, containerHeight]);\n\n  return size;\n};\n\nexport default useObjectFit;\n","import React, { useRef, useState, useCallback, useEffect } from \"react\";\nimport useObjectFit from \"./useObjectFit\";\nimport ImageUploading from \"react-images-uploading\";\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const {\n    width,\n    height,\n    ratio,\n    offsetX,\n    offsetY,\n    imgWidth,\n    imgHeight,\n    containerWidth,\n    containerHeight,\n  } = useObjectFit({\n    type: \"cover\",\n    imgUrl: images[0]?.data_url,\n    container: { width: 60, height: 100 },\n  });\n\n  const onChangeCoverImg = useCallback((imageList, addUpdateIndex) => {\n    // data for submit\n    setImages(imageList);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {`${width}, ${height}, ${ratio}, ${offsetX}, ${offsetY}, ${imgWidth} ,${imgHeight}, ${containerWidth}, ${containerHeight}`}\n\n      <ImageUploading\n        // multiple\n        value={images}\n        onChange={onChangeCoverImg}\n        maxNumber={69}\n        dataURLKey=\"data_url\"\n        acceptType={[\"jpg\", \"jpeg\", \"png\", \"webp\", \"heic\"]}\n        // maxFileSize={3000000}\n      >\n        {({\n          imageList,\n          onImageUpload,\n          onImageRemoveAll,\n          onImageUpdate,\n          onImageRemove,\n          isDragging,\n          dragProps,\n          errors,\n        }) => (\n          // write your building UI\n          <div className=\"upload__image-wrapper\">\n            <button\n              style={isDragging ? { color: \"red\" } : null}\n              onClick={onImageUpload}\n              {...dragProps}\n            >\n              Click or Drop here\n            </button>\n            {errors && (\n              <div>\n                {errors.maxNumber && (\n                  <span>Number of selected images exceed maxNumber</span>\n                )}\n                {errors.acceptType && (\n                  <span>Your selected file type is not allow</span>\n                )}\n                {errors.maxFileSize && (\n                  <span>Selected file size exceed 3MB</span>\n                )}\n                {errors.resolution && (\n                  <span>\n                    Selected file is not match your desired resolution\n                  </span>\n                )}\n              </div>\n            )}\n            {imageList[0] && (\n              <button onClick={onImageRemoveAll}>Remove all images</button>\n            )}\n            {imageList.map((image, index) => (\n              <div key={index} className=\"image-item\">\n                <img src={image.data_url} alt=\"\" width=\"100\" />\n                <div className=\"image-item__btn-wrapper\">\n                  <button onClick={() => onImageUpdate(index)}>Update</button>\n                  <button onClick={() => onImageRemove(index)}>Remove</button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </ImageUploading>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}