{"version":3,"sources":["useObjectFit.js","App.js","index.js"],"names":["useObjectFit","type","imgUrl","container","ref","dom","containerWidth","width","containerHeight","height","useState","offsetX","offsetY","imgWidth","imgHeight","imgRatio","size","setSize","refResizeGetCallback","useRef","refIsImgLoad","imgSize","setImgSize","get","useCallback","targetContainer","current","targetWidth","clientWidth","targetHeight","clientHeight","targetRatio","useEffect","window","removeEventListener","addEventListener","img","document","createElement","e","target","naturalWidth","naturalHeight","src","App","boxWidth","boxHeight","images","setImages","refContainer","data_url","ratio","onChangeCoverImg","imageList","addUpdateIndex","className","style","whiteSpace","value","onChange","maxNumber","dataURLKey","acceptType","onImageUpload","onImageUpdate","onImageRemoveAll","onImageRemove","isDragging","dragProps","errors","color","onClick","maxFileSize","resolution","map","image","index","htmlFor","overflow","border","margin","transform","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.367dc332.chunk.js","sourcesContent":["import { useRef, useState, useEffect, useCallback } from \"react\";\n\n/**\n * @param {object} {\n *   type, // \"cover\", \"contain\"\n *   imgUrl,\n *   container: {\n *      ref, // get container size by React ref\n *      dom, // get container size by Dom elm\n *      width, // directly give container size\n *      height\n *   },\n * }\n * @return {object} {\n *    width, // object fit width\n *    height, // object fit hight\n *    offsetX, // object fit offsetX\n *    offsetY, // object fit offsetY\n *    imgWidth,\n *    imgHeight,\n *    imgRatio, // origin image imgRatio\n *    containerWidth,\n *    containerHeight,\n * }\n */\nconst useObjectFit = ({\n  type,\n  imgUrl,\n  container: { ref, dom, width: containerWidth, height: containerHeight },\n}) => {\n  const [size, setSize] = useState({\n    width: 0,\n    height: 0,\n    offsetX: 0,\n    offsetY: 0,\n    imgWidth: 0,\n    imgHeight: 0,\n    imgRatio: 0,\n    containerWidth: 0,\n    containerHeight: 0,\n  });\n\n  const refResizeGetCallback = useRef();\n  const refIsImgLoad = useRef();\n  const [imgSize, setImgSize] = useState({ width: 0, height: 0 });\n\n  const get = useCallback(() => {\n    const targetContainer = ref?.current || dom;\n\n    const targetWidth = containerWidth || targetContainer?.clientWidth;\n    const targetHeight = containerHeight || targetContainer?.clientHeight;\n    const targetRatio = targetWidth / targetHeight;\n\n    const { width: imgWidth, height: imgHeight } = imgSize;\n\n    const imgRatio = imgWidth / imgHeight;\n\n    let width,\n      height,\n      offsetX = 0,\n      offsetY = 0;\n\n    if (type === \"cover\") {\n      if (imgRatio >= targetRatio) {\n        const scale = targetHeight / imgHeight;\n\n        width = imgWidth * scale;\n        offsetX = (targetWidth - width) / 2;\n        height = targetHeight;\n      } else {\n        const scale = targetWidth / imgWidth;\n        width = targetWidth;\n        height = imgHeight * scale;\n        offsetY = (targetHeight - height) / 2;\n      }\n    } else if (type === \"contain\") {\n      if (imgRatio >= targetRatio) {\n        const scale = targetWidth / imgWidth;\n        width = targetWidth;\n        height = imgHeight * scale;\n\n        offsetY = (targetHeight - height) / 2;\n      } else {\n        const scale = targetHeight / imgHeight;\n        height = targetHeight;\n        width = imgWidth * scale;\n        offsetX = (targetWidth - width) / 2;\n      }\n    }\n\n    setSize({\n      width,\n      height,\n      imgRatio,\n      offsetX,\n      offsetY,\n      imgWidth,\n      imgHeight,\n      containerWidth: targetWidth,\n      containerHeight: targetHeight,\n    });\n  }, [type, ref, dom, containerWidth, containerHeight, imgSize]);\n\n  useEffect(() => {\n    if (!refIsImgLoad.current) return;\n\n    get();\n\n    const targetContainer = ref?.current || dom;\n    if (refResizeGetCallback.current) {\n      window.removeEventListener(\"resize\", refResizeGetCallback.current);\n    }\n\n    if (window && targetContainer) {\n      window.addEventListener(\"resize\", get);\n    }\n    refResizeGetCallback.current = get;\n    return () => {\n      window.removeEventListener(\"resize\", refResizeGetCallback.current);\n    };\n  }, [get]);\n\n  useEffect(() => {\n    if (!imgUrl) return;\n    refIsImgLoad.current = false;\n    const img = document.createElement(\"img\");\n\n    img.addEventListener(\"load\", (e) => {\n      refIsImgLoad.current = true;\n      const { naturalWidth, naturalHeight } = e.target;\n      setImgSize({ width: naturalWidth, height: naturalHeight });\n    });\n    img.src = imgUrl;\n  }, [imgUrl]);\n\n  return size;\n};\n\nexport default useObjectFit;\n","import React, { useRef, useState, useCallback, useEffect } from \"react\";\nimport useObjectFit from \"./useObjectFit\";\nimport ImageUploading from \"react-images-uploading\";\n\nfunction App({ type, containerWidth: boxWidth, containerHeight: boxHeight }) {\n  const [images, setImages] = useState([]);\n  const refContainer = useRef();\n  const {\n    width,\n    height,\n    ratio,\n    offsetX,\n    offsetY,\n    imgWidth,\n    imgHeight,\n    containerWidth,\n    containerHeight,\n  } = useObjectFit({\n    type,\n    imgUrl: images[0]?.data_url,\n    container: {\n      width: boxWidth,\n      height: boxHeight,\n      // ref: refContainer,\n    },\n  });\n\n  const onChangeCoverImg = useCallback((imageList, addUpdateIndex) => {\n    // data for submit\n    setImages(imageList);\n  }, []);\n\n  return (\n    <div className=\"App\" style={{ whiteSpace: \"pre-wrap\" }}>\n      {`object-fit width: ${width}\\nobject-fit height: ${height}\\nimage ratio: ${ratio}\\noffsetX: ${offsetX}\\noffsetY: ${offsetY}\\norigin image width: ${imgWidth} \\norigin image height: ${imgHeight}\\ncontainer width: ${containerWidth}\\ncontainer height: ${containerHeight}`}\n\n      <ImageUploading\n        // multiple\n        value={images}\n        onChange={onChangeCoverImg}\n        maxNumber={69}\n        dataURLKey=\"data_url\"\n        acceptType={[\"jpg\", \"jpeg\", \"png\", \"webp\", \"heic\"]}\n        // maxFileSize={3000000}\n      >\n        {({\n          imageList,\n          onImageUpload,\n          onImageRemoveAll,\n          onImageUpdate,\n          onImageRemove,\n          isDragging,\n          dragProps,\n          errors,\n        }) => (\n          // write your building UI\n          <div className=\"upload__image-wrapper\">\n            <button\n              style={isDragging ? { color: \"red\" } : null}\n              onClick={onImageUpload}\n              {...dragProps}\n            >\n              Click or Drop here\n            </button>\n            {errors && (\n              <div>\n                {errors.maxNumber && (\n                  <span>Number of selected images exceed maxNumber</span>\n                )}\n                {errors.acceptType && (\n                  <span>Your selected file type is not allow</span>\n                )}\n                {errors.maxFileSize && (\n                  <span>Selected file size exceed 3MB</span>\n                )}\n                {errors.resolution && (\n                  <span>\n                    Selected file is not match your desired resolution\n                  </span>\n                )}\n              </div>\n            )}\n\n            {imageList.map((image, index) => (\n              <div key={index} className=\"image-item\">\n                <label htmlFor=\"\">Container：</label>\n                <div\n                  ref={refContainer}\n                  style={{\n                    width: boxWidth,\n                    height: boxHeight,\n                    overflow: \"hidden\",\n                    border: \"3px dashed green\",\n                    margin: \"1rem\",\n                  }}\n                >\n                  <img\n                    src={image.data_url}\n                    style={{\n                      width: width,\n                      height: height,\n                      transform: `translate(${offsetX}px, ${offsetY}px)`,\n                    }}\n                  />\n                </div>\n                <div className=\"image-item__btn-wrapper\">\n                  <button onClick={() => onImageUpdate(index)}>Update</button>\n                  <button onClick={() => onImageRemove(index)}>Remove</button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </ImageUploading>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}